# This is where global constants and common UI design elements are defined to be used across all loaded .kv files.
# To add a widget from here to a new .py file, create a class with its name and what it is subclassing.
#
# example:
# class TileButton(Button):
#     pass

#: import C kivy.utils.get_color_from_hex
#: import os os

#: import PlotSpinnerOptionCls es_gui.resources.widgets.common.PlotSpinnerOptionCls

# Application name and tagline strings.
#:set APP_NAME 'QuESt'
#:set TAGLINE 'Optimizing Energy Storage'

# Widths, in pixels, for proper measure in labels.
#:set TWO_ABC_WIDTH 800
#:set THREE_ABC_WIDTH 1200

# Animation durations.
#:set BASE_TRANSITION_DUR 0.600

# Color sets.
#:set hex_pantone1625c '#FFA38B'
#:set hex_pantone294c '#002F6C'
#:set hex_pantone427c '#D0D3D4'
#
#:set hex_cloud_dancer '#F0EEE9'
#:set hex_scuba_blue '#00ABC0'
#:set hex_ultra_violet '#5F4B8B'
#
#:set hex_snl_medium_blue '005376'
#:set hex_snl_green '84BD00'
#:set hex_snl_gray '3D3D3D'

# Application palette.
# QuESt foundation colors
#:set hex_primary hex_snl_medium_blue
#:set hex_secondary hex_snl_green

# QuESt support colors
#:set hex_pms312 '00ADD0'
#:set hex_pms137 'FFA300'
#:set hex_pms178 'FF585D'
#:set hex_pms674 'AE2573'

#:set hex_black hex_snl_gray
#:set hex_white '#FFFFFF'

# Font sizes.
# #:set default_font sp(16)
# #:set stnd_font sp(20)
# #:set large_font sp(28)
# #:set huge_font sp(36)
#:set default_font sp(20)
#:set stnd_font sp(22)
#:set large_font sp(30)
#:set huge_font sp(40)

# Sets default font (if not specified by class rule).
<Widget>:
    font_size: default_font
    font_name: 'Exo 2'

# This is a label template for left-aligned text. It includes options to prevent text from overflowing.
<LeftAlignedText@Label>:
    text_size: self.width, None
    height: self.texture_size[1]
    halign: 'left'

# Text style for title labels.
<TitleTextBase@LeftAlignedText>:
    font_name: 'Exo 2'
    font_size: huge_font
    color: C(hex_primary)
    bold: True

# Text style for body text labels.
<BodyTextBase@LeftAlignedText>:
    font_name: 'Open Sans'
    font_size: stnd_font
    color: C(hex_black)

# This is the generic flat, square Tile Button used throughout the application.
# Subclass: Button
<TileButton>:
    background_normal: os.path.join('es_gui', 'resources', 'images', 'button_normal.png')
    background_down: os.path.join('es_gui', 'resources', 'images', 'button_down.png')
    background_color: C(hex_primary)
    color: C(hex_white)
    font_name: 'Exo 2'
    font_size: stnd_font
    text_size: self.width, None
    height: self.texture_size[1]
    halign: 'center'
    markup: True

# This is a TileButton with toggle button behavior.
<ToggleTileButton>:
    background_down: os.path.join('es_gui', 'resources', 'images', 'button_normal.png')
    background_color: C(hex_primary) if self.state == 'down' else C(hex_cloud_dancer)
    color: C(hex_secondary) if self.state == 'down' else C(hex_black)

# This is the menu version of the TileButton used for large menu items.
# Subclass: TileButton
<MenuTileButton@TileButton>:
    font_name: 'Exo 2'
    font_size: large_font

# This is the RecycleView class.
<MyRecycleView>:
    scroll_type: ['bars', 'content']
    bar_width: dp(10)
    bar_color: C(hex_secondary)
    bar_inactive_color: C(hex_secondary)

    canvas.before:
        Color:
            rgba: C(hex_cloud_dancer)
        Rectangle:
            size: self.size
            pos: self.pos

# This is the layout class for RecycleView with selectable labels.
<SelectableRecycleBoxLayout>:
    default_size: None, dp(30)
    default_size_hint: 1, None
    size_hint_y: None
    height: self.minimum_height
    orientation: 'vertical'

# This is the view class for RecycleView with selectable labels.
<RecycleViewRow>:
    canvas.before:
        Color:
            rgba: C(hex_primary) if self.selected else C(hex_cloud_dancer)
        Rectangle:
            size: self.size
            pos: self.pos
    name: ''
    Label:
        text: root.name
        text_size: self.size
        font_size: default_font
        color: C(hex_secondary) if root.selected else C(hex_black)
        valign: 'middle'
        halign: 'left'
        padding: (10, 10)

# This is the class for describing the appearance of options in the Plot Spinner.
# Subclass: SpinnerOption
<PlotSpinnerOptionCls>:
    background_normal: os.path.join('es_gui', 'resources', 'images', 'button_normal.png')
    background_down: os.path.join('es_gui', 'resources', 'images', 'button_down.png')
    background_color: C(hex_cloud_dancer)
    color: C(hex_black)
    font_size: stnd_font
    text_size: self.width, None
    halign: 'center'

# This is a Spinner used in the Plot Screen for option selection.
# Subclass: Spinner
<PlotSpinner>:
    background_color: C(hex_primary)
    color: C(hex_white)
    font_size: stnd_font
    text_size: self.width, None
    halign: 'center'
    #option_cls: PlotSpinnerOptionCls

# This is a generic popup with a modified appearance. Subclass from this to make more specific popups.
# Subclass: Popup
<MyPopup>:
    separator_color: C(hex_secondary)
    separator_height: dp(2)

    title_align: 'left'
    title_font: 'Exo 2'
    title_size: stnd_font

    size_hint: (0.40, 0.37)
    auto_dismiss: False

# This is a warning popup window to inform users of execution warnings. Contains text and a single dismiss button.
# Subclass: MyPopup
<WarningPopup>:
    popup_text: popup_text
    dismiss_button: dismiss_button
    title: 'Oops!'

    BoxLayout:
        orientation: 'vertical'
        padding: 10

        PopupLabel:
            id: popup_text

        Button:
            id: dismiss_button
            halign: 'center'
            size_hint: (1.00, 0.20)
            text: 'Got it'
            font_size: stnd_font
            on_release: root.dismiss()

# This is a label template for Popup content. It includes options to prevent text from overflowing its container.
# Subclass: Label
<PopupLabel@Label>:
    size_hint_y: 0.80
    text_size: self.width, None
    height: self.texture_size[1]
    font_size: stnd_font
    halign: 'justify'
    font_name: 'Open Sans'

# This is a popup template for valuation complete messages.
# Subclass: MyPopup
<ValuationRunCompletePopup>:
    title: 'Success!'

    view_results_button: view_results_button
    popup_text: popup_text

    BoxLayout:
        orientation: 'vertical'
        spacing: 10
        padding: 10

        PopupLabel:
            id: popup_text
            size_hint_y: 0.8
            markup: True
            halign: 'left'
            valign: 'top'
            text: 'Your specified batch runs have been completed.'

        BoxLayout:
            orientation: 'horizontal'
            spacing: 10
            padding: 0
            size_hint_y: 0.2

            Button:
                id: view_results_button
                text: 'Go to results viewer'
                font_size: stnd_font

            Button:
                text: 'Got it'
                font_size: stnd_font
                on_release: root.dismiss()

# This is a loading screen.
# Subclass: ModalView
<LoadingModalView>:
    logo: logo
    loading_text: loading_text

    auto_dismiss: False
    size_hint_y: 0.30
    size_hint_x: 0.20
    background_color: [0, 0, 0, 0.8]

    BoxLayout:
        orientation: 'vertical'
        spacing: 10
        padding: 25

        Image:
            id: logo
            source: os.path.join('es_gui', 'resources', 'logo', 'Quest_Q_Reversed_RGB.png')
            size_hint_y: 0.9
        
        Label:
            id: loading_text
            size_hint_y: 0.1
            text: 'Loading...'
            font_size: large_font
            color: C(hex_white)
            background_color: (1, 1, 1, 0)
